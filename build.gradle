//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Opcodes

buildscript {
	repositories {
		maven {
			name = 'Aliyun Mirror'
			url  = 'https://maven.aliyun.com/repository/public'
		}
	}
	dependencies {
		classpath("org.ow2.asm:asm:9.3")
	}
}

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

allprojects {
	repositories {
		maven { url "https://maven.aliyun.com/repository/public" }
		maven { url "https://lss233.littleservice.cn/repositories/minecraft" }
		maven { url "https://jitpack.io" }
		maven { url "https://maven.shedaniel.me/" }
		maven { url "https://covid-trump.github.io/mvn/" }
		maven { url "https://maven.terraformersmc.com/releases" }
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

	compileOnly 'xland.mcmodbridge:fa2fomapper:3.0.0'
}

task generateModClass {
	def pkgName = 'Iqj4fLE5TtRybrFdmk6vK'
	def fileUuid = "$pkgName/A"
	def fileUuid2 = "$pkgName/B"
	def modId = "customsplashscreen"
	def mainClass = 'eu/midnightdust/customsplashscreen/CustomSplashScreenClient'
	def file = new File(processResources.destinationDir, "${fileUuid}.class")
	doLast {
		file.parentFile.mkdirs()
		if (file.exists()) file.delete()
		file.createNewFile()
		def writer = new ClassWriter(3)
		writer.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, fileUuid, null,
				"java/lang/Object", null)
		def m = writer.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
		m.visitVarInsn(Opcodes.ALOAD, 0)
		m.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false)
		m.visitInsn(Opcodes.RETURN)
		m.visitMaxs(-1, -1)

		writer.visitAnnotation("Lnet/minecraftforge/fml/common/Mod;", true).visit("value", modId)
		writer.visitSource(null, "ASM Generated")

		writer.visitAnnotation("Lnet/minecraftforge/api/distmarker/OnlyIn;", true)
				.visitEnum("value", "Lnet/minecraftforge/api/distmarker/Dist;", "CLIENT")

		def a = file.newOutputStream()
		a.write(writer.toByteArray())
		a.close()

		def file2 = new File(processResources.destinationDir, "${fileUuid2}.class")
		if (file2.exists()) file2.delete()
		file2.createNewFile()
		writer = new ClassWriter(3)
		writer.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, fileUuid2, null,
				"java/lang/Object", new String[]{"java/lang/Runnable"})
		m = writer.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
		m.visitVarInsn(Opcodes.ALOAD, 0)
		m.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false)
		m.visitInsn(Opcodes.RETURN)
		m.visitMaxs(-1, -1)
		m = writer.visitMethod(Opcodes.ACC_PUBLIC, "run", "()V", null, null)
		m.visitMethodInsn(Opcodes.INVOKESTATIC, mainClass, "init", "()V", false)
		m.visitInsn(Opcodes.RETURN)
		m.visitMaxs(-1, -1)
		m = writer.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "CLIENT", "(Lnet/minecraftforge/fml/event/lifecycle/FMLClientSetupEvent;)V",
				null, null)
		m.visitAnnotation("Lnet/minecraftforge/eventbus/api/SubscribeEvent;", true)
		m.visitVarInsn(Opcodes.ALOAD, 0)
		m.visitTypeInsn(Opcodes.NEW, fileUuid2)
		m.visitInsn(Opcodes.DUP)
		m.visitMethodInsn(Opcodes.INVOKESPECIAL, fileUuid2, "<init>", "()V", false)
		m.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "net/minecraftforge/fml/event/lifecycle/FMLClientSetupEvent",
				"enqueueWork", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;")
		m.visitInsn(Opcodes.RETURN)
		m.visitMaxs(-1, -1)
		writer.visitSource(null, "ASM Generated")
		def ann = writer.visitAnnotation("Lnet/minecraftforge/fml/common/Mod\$EventBusSubscriber;", true)
		ann.visit("modid", modId)
		ann.visitEnum("bus", "Lnet/minecraftforge/fml/common/Mod\$EventBusSubscriber\$Bus;",
				"MOD")
		def ann2 = ann.visitArray("value")
		ann2.visitEnum(null, "Lnet/minecraftforge/api/distmarker/Dist;", "CLIENT")
		ann2.visitEnd()
		ann.visitEnd()
		a = file2.newOutputStream()
		a.write(writer.toByteArray())
		a.close()
	}
}

processResources {
	finalizedBy(generateModClass)
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

java.withSourcesJar()

jar {
	from ("LICENSE") {
		rename {  "${it}_${project.archivesBaseName}"  }
	}
	manifest {
		attributes([
				"Specification-Title"     : "CustomSplashScreen",
				"Specification-Vendor"    : "MidnightDust",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.version,
				"Implementation-Vendor"   : "Motschen,TeamMidnightDust,HypherionSA,teddyxlandlee",
				"Implementation-Timestamp": Instant.now(),
				"Fa2Fo-MultiPlatform"     : "true"
		])
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

task copyRemappedClass(type: Copy, dependsOn: remapJar) {
	from "build/libs/${project.archivesBaseName}-${project.version}.jar"
	into 'CustomSplashScreenF2F/build/fabric-installer-prepare'
}