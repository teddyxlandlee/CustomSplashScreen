//file:noinspection GrDeprecatedAPIUsage


import com.google.gson.Gson
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Opcodes

import java.security.MessageDigest
import java.time.Instant

buildscript {
    repositories {
        maven {
            name = 'Aliyun Mirror'
            url  = 'https://maven.aliyun.com/repository/public'
        }
    }
    dependencies {
        classpath("org.ow2.asm:asm:9.3")
        classpath("com.google.code.gson:gson:2.9.0")
    }
}

plugins {
    id 'java'
}

version = rootProject.version
group = rootProject.group

dependencies {
    compileOnly 'com.google.guava:guava:21.0'
    compileOnly 'org.ow2.asm:asm:7.2'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.1'
    compileOnly 'org.apache.commons:commons-lang3:3.5'
    compileOnly files("lib/fa2fomapper-4.0.0.jar")
    compileOnly 'org.jetbrains:annotations:19.0.0'
    compileOnly 'cpw.mods:modlauncher:8.1.3'
}

tasks.withType(JavaCompile.class).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 17
    if (JavaVersion.current().isJava9Compatible())
        it.options.release = targetVersion
}
java.withSourcesJar()

jar {
    manifest {
        attributes([
                "Specification-Title"     : "CustomSplashScreen",
                "Specification-Vendor"    : "MidnightDust",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Motschen,TeamMidnightDust,HypherionSA,teddyxlandlee",
                "Implementation-Timestamp": Instant.now()
        ])
    }
}

task generateMappingClass {
    def className = "eu/midnightdust/customsplashscreen/f2f/\$Mapping"
    doLast {
        def mapping = project.file("mapping.tiny").readLines('utf-8')

        def cw = new ClassWriter(3)
        cw.visit(Opcodes.V1_6, Opcodes.ACC_SUPER, className, null, "java/lang/Object", null)
        cw.visitSource(null, "ASM Generated")

        def sb = new StringBuilder(65535)
        List<String> strings = []
        for (String line in mapping) {
            int len = line.length()
            if (sb.length() + len < 65500)
                sb.append(line).append('\n')
            else {
                strings.add(sb.toString())
                if (len > 65535) {
                    char[] c = new char[65535]
                    for (int i = 0; i < len; i += 65536) {
                        int len2 = len - i
                        if (len2 > 65535) len2 = 65535
                        line.getChars(i, i+len2+1, c, 0)
                        strings.add(String.valueOf(c, 0, len2))
                    }
                } else strings.add(line)
            }
        }
        strings.add(sb.toString())
        String constVal
        switch (strings.size()) {
            case 0:
                constVal = ""
                break
            case 1:
                constVal = strings[0]
                break
            default:
                constVal = null
        }

        cw.visitField(Opcodes.ACC_STATIC + Opcodes.ACC_FINAL,
                "instance", "Ljava/lang/String;", null, constVal)
        if (constVal == null) {
            cw.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null).with {m ->
                m.visitTypeInsn(Opcodes.NEW, "java/lang/StringBuilder")
                m.visitInsn(Opcodes.DUP)
                m.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false)
                for (final String s in strings) {
                    m.visitLdcInsn(s)
                    m.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "append",
                            "(Ljava/lang/String;)Ljava/lang/StringBuilder;")
                }
                m.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/StringBuilder", "toString",
                        "()Ljava/lang/String;", false)
                m.visitFieldInsn(Opcodes.PUTSTATIC, className, "instance", "Ljava/lang/String;")
                m.visitInsn(Opcodes.RETURN)
                m.visitMaxs(-1, -1)
                m.visitEnd()
            }
        }
        cw.visitEnd()

        def dir = processResources.destinationDir
        File file = new File(dir, "${className}.class")
        file.parentFile.mkdirs()
        file.newOutputStream().with { os ->
            os.write(cw.toByteArray())
            os.close()
        }
    }
}

processResources.dependsOn(generateMappingClass)

void generateFMJ(UUID uuid) {
    new File(buildDir, "fabric-installer").mkdirs()

    JsonObject o = new JsonObject()
    o.addProperty("schemaVersion", 1)
    o.addProperty("name", "installer-$uuid")
    o.addProperty("version", "1")
    o.add("custom", new JsonObject().with(true) {it ->
        it.add("modmenu", new JsonObject().with(true) {it2 ->
            it2.add("badges", new JsonArray().with(true) {it3 ->
                it3.add("library")
            })
        })
    })
    o.add("jars", new JsonArray().with(true) {
        ["fa2fomapper-4.0.0.jar", "${project.archivesBaseName}-${project.version}.jar",
        "${rootProject.archivesBaseName}-${rootProject.version}.jar"].forEach {s ->
            it.add(new JsonObject().with(true) {b ->
                b.addProperty("file", s)
            })
        }
    })


    def writer = new File(buildDir, "fabric-installer/fabric.mod.json").newWriter('utf-8')
    new Gson().toJson(o, writer)
    writer.close()
}

private static String bytes2str(byte[] b) {
    def sb = new StringBuilder()
    for (int i = 0; i < b.length; i++) {
        int j = b[i]
        if (j < 0) j += 256
        sb << (j >> 4) << (j & 0x0F)
    }
    return sb.toString()
}

void generateChecksum() {
    def file = new File(buildDir, "fabric-installer/META-INF/file.list")
    file.parentFile.mkdir()

    def w = file.newWriter('utf-8')

    ["fa2fomapper-4.0.0.jar", "${project.archivesBaseName}-${project.version}.jar",
     "${rootProject.archivesBaseName}-${rootProject.version}.jar"].forEach {
        def input = new File(buildDir, "fabric-installer/$it").newInputStream()
        def checksum = MessageDigest.getInstance("SHA-256")
        int i
        byte[] b = new byte[8192]
        while ((i = input.read(b)) > 0) {
            checksum.update(b, 0, i)
        }
        def s = bytes2str(checksum.digest())
        w << "$s\t$it\n"
    }
    w.close()
}

task copyRemappedClass(type: Copy, dependsOn: jar) {
    from "build/libs/${project.archivesBaseName}-${project.version}.jar"
    into 'build/fabric-installer-prepare/'
}

task generateInstallerFiles(type: Copy) {
    dependsOn copyRemappedClass, rootProject.copyRemappedClass
    from 'lib', "build/fabric-installer-prepare"
    into new File(buildDir, "fabric-installer")
    def uuid = UUID.fromString("d83b0da5-4a50-4eaa-b409-b6eba972f051")
    doLast {
        generateFMJ(uuid)
        generateChecksum()
    }
}

task generateInstallerJar(type: Jar, dependsOn: generateInstallerFiles) {
    from 'build/fabric-installer'
    appendix 'installer'
    extension 'jar'
    destinationDir new File(buildDir, "libs")
    manifest {
        attributes(['Main-Class': "Install"])
    }
}

build {
    dependsOn generateInstallerJar
}
